// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ContactsAPI.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ContactsFeature : object, Xunit.IClassFixture<ContactsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Contact.feature"
#line hidden
        
        public ContactsFeature(ContactsFeature.FixtureData fixtureData, ContactsAPI_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Contacts", "Contact management endpoints for creating, updating, fetching and deleting contac" +
                    "t records.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
    testRunner.Given("I am an authenticated user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get All Contacts")]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts")]
        [Xunit.TraitAttribute("Description", "Get All Contacts")]
        [Xunit.TraitAttribute("Category", "GetAllContacts")]
        [Xunit.InlineDataAttribute("api/contacts", "200", "{\"data\":[{\"id\":1,\"firstName\":\"John\",\"lastName\":\"Doe\",\"email\":\"john.doe@example.co" +
            "m\",\"phoneNumber\":\"1234567890\"}]}", new string[0])]
        public void GetAllContacts(string endpoint, string responseStatusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetAllContacts"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("responseStatusCode", responseStatusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Contacts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 10
    testRunner.When(string.Format("I make a GET request to \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then(string.Format("the response status code is \'{0}\'", responseStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
    testRunner.Then(string.Format("the response data should be \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get Contact by ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts")]
        [Xunit.TraitAttribute("Description", "Get Contact by ID")]
        [Xunit.TraitAttribute("Category", "GetContactById")]
        [Xunit.InlineDataAttribute("api/contacts/1", "200", "{\"data\":{\"id\":1,\"firstName\":\"John\",\"lastName\":\"Doe\",\"email\":\"john.doe@example.com" +
            "\",\"phoneNumber\":\"1234567890\"}}", new string[0])]
        [Xunit.InlineDataAttribute("api/contacts/99", "404", "{\"message\":\"Contact with Id 99 not found.\"}", new string[0])]
        public void GetContactByID(string endpoint, string responseStatusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetContactById"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("responseStatusCode", responseStatusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Contact by ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 20
    testRunner.When(string.Format("I make a GET request to \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    testRunner.Then(string.Format("the response status code is \'{0}\'", responseStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.Then(string.Format("the response data should be \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create Contact")]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts")]
        [Xunit.TraitAttribute("Description", "Create Contact")]
        [Xunit.TraitAttribute("Category", "CreateContact")]
        [Xunit.InlineDataAttribute("api/contacts", "{\"firstName\":\"Alice\",\"lastName\":\"Wonder\",\"email\":\"alice@wonder.com\",\"phoneNumber\"" +
            ":\"5551234567\"}", "201", "{\"message\":\"Contact Created Successfully\",\"id\":2}", new string[0])]
        [Xunit.InlineDataAttribute("api/contacts", "{\"firstName\":\"\",\"lastName\":\"Wonder\",\"email\":\"alice@wonder.com\",\"phoneNumber\":\"555" +
            "1234567\"}", "400", "{\"FirstName\":[\"First name is required.\"]}", new string[0])]
        public void CreateContact(string endpoint, string requestData, string responseStatusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateContact"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("requestData", requestData);
            argumentsOfScenario.Add("responseStatusCode", responseStatusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Contact", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 31
    testRunner.When(string.Format("I make a POST request to \'{0}\' with the following data \'{1}\'", endpoint, requestData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then(string.Format("the response status code is \'{0}\'", responseStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.Then(string.Format("the response data should be \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update Contact")]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts")]
        [Xunit.TraitAttribute("Description", "Update Contact")]
        [Xunit.TraitAttribute("Category", "UpdateContact")]
        [Xunit.InlineDataAttribute("api/contacts/1", "{\"firstName\":\"John\",\"lastName\":\"Doe Updated\",\"email\":\"john.updated@example.com\",\"" +
            "phoneNumber\":\"1234509876\"}", "200", "{\"message\":\"Contact with Id 1 updated successfully.\"}", new string[0])]
        [Xunit.InlineDataAttribute("api/contacts/999", "{\"firstName\":\"Ghost\",\"lastName\":\"Unknown\",\"email\":\"ghost@example.com\",\"phoneNumbe" +
            "r\":\"0000000000\"}", "404", "{\"message\":\"Contact with Id 999 not found.\"}", new string[0])]
        public void UpdateContact(string endpoint, string requestData, string responseStatusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UpdateContact"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("requestData", requestData);
            argumentsOfScenario.Add("responseStatusCode", responseStatusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Contact", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 42
    testRunner.When(string.Format("I make a PUT request to \'{0}\' with the following data \'{1}\'", endpoint, requestData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
    testRunner.Then(string.Format("the response status code is \'{0}\'", responseStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.Then(string.Format("the response data should be \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete Contact")]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts")]
        [Xunit.TraitAttribute("Description", "Delete Contact")]
        [Xunit.TraitAttribute("Category", "DeleteContact")]
        [Xunit.InlineDataAttribute("api/contacts/1", "200", "{\"message\":\"Contact with Id 1 deleted successfully.\"}", new string[0])]
        [Xunit.InlineDataAttribute("api/contacts/100", "404", "{\"message\":\"Contact with Id 100 not found.\"}", new string[0])]
        public void DeleteContact(string endpoint, string responseStatusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DeleteContact"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("endpoint", endpoint);
            argumentsOfScenario.Add("responseStatusCode", responseStatusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Contact", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 53
    testRunner.When(string.Format("I make a DELETE request to \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
    testRunner.Then(string.Format("the response status code is \'{0}\'", responseStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
    testRunner.Then(string.Format("the response data should be \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ContactsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ContactsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
